# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: MSBuild

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release
  PLATFORM: x64

permissions:
  contents: write
  issues: write

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v2
      with:
        msbuild-architecture: x64

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Platform=${{env.PLATFORM}} /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: kdmapper
        path: D:/a/kdmapper/kdmapper/x64/Release/*
        compression-level: 9

  # create-release:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/master'
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Download Artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: kdmapper

  #     - name: Create Release and Upload Asset
  #       run: |
  #         tag=$(date +'%Y.%m.%d-%H%M%S')
  #         title="${GITHUB_REPOSITORY#*/} ${tag}"
  #         gh release create "$tag" --repo "$GITHUB_REPOSITORY" --title "$title" --generate-notes
  #         gh release upload "$tag" ./*.exe --repo "$GITHUB_REPOSITORY"
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
